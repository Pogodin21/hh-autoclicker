const { PAGE_TIMEOUT_MS, SEARCH_URL } = require("./modules/config/config");
const { launchBrowser } = require("./modules/browser/launchBrowser");
const { getVisibleVacancies } = require("./modules/vacancies/getVisibleVacancies");
const { processVacancies } = require("./modules/vacancies/processVacancies");
const { loadForms, saveForms } = require("./modules/forms/formsStore");
const { loadResponded, saveResponded } = require("./modules/forms/respondedStore");
const { generateHtmlReport } = require("./modules/report/generateHtmlReport");

const readline = require("readline");

(async () => {
  const browser = await launchBrowser(); //–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
  const page = await browser.newPage(); //–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

  //–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ (–ø–æ–∏—Å–∫ –Ω–∞ hh.ru —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞)
  await page.goto(SEARCH_URL, {
    waitUntil: "domcontentloaded",
    timeout: PAGE_TIMEOUT_MS,
  });

  // await waitForUserToStart(); // –ñ–¥—ë–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log("üîç –ù–∞—Å—Ç—Ä–æ–π –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.");
  console.log("‚ñ∂ –ù–∞–∂–º–∏ Enter ‚Äî —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
  console.log("‚ùå –í–≤–µ–¥–∏ `exit` ‚Äî —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç.\n");

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  let isRunning = false;
  let processing = false;
  let stopRequested = { value: false };

  const savedForms = loadForms();
  const responded = loadResponded();

  rl.on("line", async (input) => {
    const trimmed = input.trim().toLowerCase();

    if (trimmed === "exit") {
      console.log("üì¶ –ó–∞–≤–µ—Ä—à–∞—é. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç...");
      saveForms(savedForms);
      await generateHtmlReport(savedForms);
      rl.close();
      await browser.close();
      process.exit(0);
    }

    if (processing) {
      console.log("‚è≥ –ò–¥—ë—Ç –ø–∞—Ä—Å–∏–Ω–≥. –ñ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...");
      stopRequested.value = true;
      return;
    }

    console.log("‚ñ∂ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
    isRunning = true;
    stopRequested.value = false;
    processing = true;

    try {
      const visibleVacancies = await getVisibleVacancies(page);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${visibleVacancies.length} –≤–∏–¥–∏–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.`);

      await processVacancies(
        browser,
        visibleVacancies,
        savedForms,
        stopRequested,
        responded,
        saveResponded
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
    }

    isRunning = false;
    processing = false;
    console.log(
      "‚úÖ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ. –ù–∞–∂–º–∏ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞."
    );
  });
})();
