const fs = require("fs");
const { saveForms } = require("./formsManager");
const { WAIT_ON_FORM_MS, PAGE_TIMEOUT_MS, RESPONSE_FORM_SELECTOR } = require("../config/config");
const { loadResponded, saveResponded } = require("./respondedManager");

async function processVacancies(browser, vacancies, savedForms, stopRequestedRef) {
   const responded = loadResponded();
  
  for (let i = 0; i < vacancies.length; i++) {
    if (stopRequestedRef.value) break;

    const vacancy = vacancies[i];

    // if (responded.has(vacancy.vacancyId)) {
    //   console.log(`‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é ${vacancy.vacancyId}, —É–∂–µ –±—ã–ª –æ—Ç–∫–ª–∏–∫.`);
    //   continue;
    // }

    console.log(`üëâ –û—Ç–∫—Ä—ã–≤–∞—é ${i + 1}/${vacancies.length}: ${vacancy.href}`);

    try {
      const newPage = await browser.newPage();
      await newPage.goto(vacancy.href, {
        waitUntil: "domcontentloaded",
        timeout: PAGE_TIMEOUT_MS,
      });

      const hasForm = await newPage.$(RESPONSE_FORM_SELECTOR);
      if (hasForm) {
        console.log(`üìù –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${vacancy.vacancyId}`);

        if (!savedForms.some((f) => f.vacancyId === vacancy.vacancyId)) {
          savedForms.push({
            vacancyId: vacancy.vacancyId,
            href: vacancy.href,
            timestamp: new Date().toISOString(),
          });
          saveForms(savedForms);
          console.log(`‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ forms.json`);
        } else {
          console.log(`‚ö†Ô∏è –≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ.`);
        }


        responded.add(vacancy.vacancyId);
        saveResponded(responded);
        console.log(`üìå ID ${vacancy.vacancyId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ responded.json`);
      } else {
        console.log(`‚úÖ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${vacancy.vacancyId} –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      }

      console.log(`‚è≥ –ñ–¥—É ${WAIT_ON_FORM_MS / 1000} —Å–µ–∫—É–Ω–¥...`);
      await new Promise((resolve) => setTimeout(resolve, WAIT_ON_FORM_MS));

      await newPage.close();
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π ${vacancy.vacancyId}:`, err);
    }
  }
}

module.exports = { processVacancies };
